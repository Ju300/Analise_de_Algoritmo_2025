# -*- coding: utf-8 -*-
"""quick_sort_com tempo_de_execucao_otimizado

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FDKUgUpqHxka2zmlz-Nxar9yhQ1WWEsw
"""

import time
from random import randint

def quick_sort_inplace(arr, low, high):
    """
    Implementação do Quick Sort usando o método de partição de Lomuto (in-place).

    Parâmetros:
    arr  -> Lista a ser ordenada
    low  -> Índice inicial
    high -> Índice final
    """
    if low < high:
        p = partition(arr, low, high)
        quick_sort_inplace(arr, low, p - 1)
        quick_sort_inplace(arr, p + 1, high)

def partition(arr, low, high):
    """ Particiona o array usando o pivô (último elemento) e retorna a posição final do pivô """
    pivot = arr[high]
    i = low - 1  # Índice do menor elemento

    for j in range(low, high):
        if arr[j] <= pivot:
            i += 1
            arr[i], arr[j] = arr[j], arr[i]  # Troca os elementos

    arr[i + 1], arr[high] = arr[high], arr[i + 1]  # Coloca o pivô na posição correta
    return i + 1  # Retorna o índice do pivô


# ---------------------- Teste com Lista Pequena ----------------------
print("Teste do algoritmo")

lista = [34, 7, 23, 32, 5, 62, 32, 12, 90, 3]
print("Lista original:", lista)

quick_sort_inplace(lista, 0, len(lista) - 1)

print("Lista ordenada:", lista)

# ---------------------- Medindo Tempo de Execução ----------------------
# Gerar listas aleatórias
arr_100 = [randint(1, 1000000) for _ in range(100)]
arr_1000 = [randint(1, 1000000) for _ in range(1000)]
arr_10000 = [randint(1, 1000000) for _ in range(10000)]
arr_100000 = [randint(1, 1000000) for _ in range(100000)]

print("\nCalculando tempo de execução:")

def medir_tempo(arr, tamanho):
    """ Mede o tempo de execução do Quick Sort in-place """
    temp = arr[:]  # Copia a lista para manter os dados originais
    inicio = time.perf_counter()
    quick_sort_inplace(temp, 0, len(temp) - 1)
    fim = time.perf_counter()
    print(f"Tempo para ordenar {tamanho} elementos: {fim - inicio:.6f} segundos")

# Medição do tempo de execução
medir_tempo(arr_100, 100)
medir_tempo(arr_1000, 1000)
medir_tempo(arr_10000, 10000)
medir_tempo(arr_100000, 100000)